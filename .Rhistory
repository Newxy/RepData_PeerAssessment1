dataMatrix<-matrix(rnorm(400), nrow=40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar=rep(0.2,4))
heatmap(dataMatrix)
set.seed(678910)
for (i in 1:40){
coinFlip<-rbinom(1, size=1, prob=0.5)
if(coinFlip){
dataMatrix[i, ]<-dataMatrix[i,]+rep(c(0,3), each=5)
}
set.seed(678910)
for (i in 1:40){
coinFlip<-rbinom(1, size=1, prob=0.5)
if(coinFlip){
dataMatrix[i, ]<-dataMatrix[i,]+rep(c(0,3), each=5)
}
}
par(mar=rep(0.2, 4))
image(1:10, 1:10, t(dataMatrix)[, nrow(dataMatrix):1])
set.seed(678910)
for (i in 1:40){
coinFlip<-rbinom(1, size=1, prob=0.5)
if(coinFlip){
dataMatrix[i, ]<-dataMatrix[i,]+rep(c(0,3), each=5)
}
}
par(mar=rep(0.2, 4))
image(1:10, 1:10, t(dataMatrix)[, nrow(dataMatrix):1])
set.seed(678910)
for (i in 1:40){
coinFlip<-rbinom(1, size=1, prob=0.5)
if(coinFlip){
dataMatrix[i, ]<-dataMatrix[i,]+rep(c(0,3), each=5)
}
}
par(mar=rep(0.2, 4))
image(1:10, 1:10, t(dataMatrix)[, nrow(dataMatrix):1])
set.seed(678910)
for (i in 1:40){
coinFlip<-rbinom(1, size=1, prob=0.5)
if(coinFlip) {
dataMatrix[i, ]<-dataMatrix[i,]+rep(c(0,3), each=5)
}
}
set.seed(678910)
set.seed(678910)
for (i in 1:40){
coinFlip<-rbinom(1, size=1, prob=0.5)
if(coinFlip) {
dataMatrix[i, ]<-dataMatrix[i,]+rep(c(0,3), each=5)
}
}
par(mar=rep(0.2, 4))
image(1:10, 1:10, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar=rep(0.2, 4))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar=rep(0.2,4))
heatmap(dataMatrix)
hh<-hclust(dist(dataMatrix))
dataMatrixOrdered<-dataMatrix[hh$order,]
par(mfrow=c(1,3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, xlab="Row Mean", ylab="Row", pch=19)
plot(colMeans(dataMatrixOrdered), xlab="Column", ylab="Column Mean", pch=19)
par(mfrow=c(1,2))
plot(svd1$d, xlab="Column", ylab="singular value", pch=19)
plot(svd1$d^2/sum(svd1$d^2), xlab="Column", ylab="Prop. of variance explained", pch=19)
svd1<-svd(scale(dataMatrixOrdered))
par(mfrow=c(1,3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd1$u[,1], 40:1, xlab="Row", ylab="First left singular vector", pch=19)
plot(svd1$v[,1], xlab="Column", ylab="First right singular vector", pch=19)
par(mfrow=c(1,2))
plot(svd1$d, xlab="Column", ylab="singular value", pch=19)
plot(svd1$d^2/sum(svd1$d^2), xlab="Column", ylab="Prop. of variance explained", pch=19)
svd1<-svd(scale(dataMatrixOrdered))
pca1<-prcomp(dataMatrixOrdered, scale=TRUE)
plot(pca1$rotation[,1], svd1$v[,1], pch=19, xlab="principal component1", ylab="right singular value")
abline(c(0,1))
constantMatrix<-dataMatrixOrdered*0
for(i in 1:dim(dataMatrixOrdered)[1]){constantMatrix[i,]<-rep(c(0, 1), each=5)}
svd1<-svd(constantMatrix)
par(mfrow=c(1,3))
image(t(constantMatrix)[,nrow(constantMatrix):1])
plot(svd1$d, xlab="Column", ylab="Singular Value", pch=19)
plot(svd1$d^2/sum(svd1$d^2), xlab="Column", ylab="Prop. of variance", pch=19)
constantMatrix<-dataMatrixOrdered*0
for(i in 1:dim(dataMatrixOrdered)[1]){constantMatrix[i,]<-rep(c(0, 1), each=5)}
svd1<-svd(constantMatrix)
par(mfrow=c(1,3))
image(t(constantMatrix)[,nrow(constantMatrix):1])
plot(svd1$d, xlab="Column", ylab="Singular Value", pch=19)
plot(svd1$d^2/sum(svd1$d^2), xlab="Column", ylab="Prop. of variance", pch=19)
constantMatrix<-dataMatrixOrdered*0
View(constantMatrix)
set.seed(12345)
par(mar=rep(0.2,4))
dataMatrix<-matrix(rnorm(400), nrow=40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
set.seed(678910)
for(i in 1:40) {
coinflip1<-rbinom(1, size=1, prob=0.5)
coinflip2<-rbinom(1, size=1, prob=0.5)
if (coinflip1) {
dataMatrix[i,]<-dataMatrix[i,]+rep(c(0,5), each=5)
}
if (coinflip2) {
dataMatrix[i,]<-dataMatrix[i,]+rep(c(0,5), each=5)
}
}
hh<-hclust(dist(dataMatrix))
dataMatrixOrdered<-dataMatrix[hh$order,]
svd2<-svd(scale(dataMatrixOrdered))
par(mfrow=c(1,3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rep(c(0,1), each=5), pch=19, xlab="column", ylab="pattern 1")
plot(rep(c(0,1),5), pch=19, xlab="column", ylab="pattern 2")
svd2<-svd(scale(dataMatrixOrdered))
par(mfrow=c(1,3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd2$u[,1], xlab="Row", ylab="First left singular vector", pch=19)
plot(svd2$v[,1], xlab="Column", ylab="First right singular vector", pch=19)
par(mfrow=c(1,2))
plot(svd2$d, xlab="Column", ylab="singular value", pch=19)
plot(svd2$d^2/sum(svd2$d^2), xlab="Column", ylab="Prop. of variance explained", pch=19)
dataMatrix2<-dataMatrixOrdered
dataMatrix2[sample(1:100, size=40, replace=FALSE)]<-NA
svd1<-svd(scale(dataMatrix2))
View(dataMatrix)
View(dataMatrix2)
library(impute)
dataMatrix2<-dataMatrixOrdered
dataMatrix2[sample(1:100, size=40, replace=FALSE)]<-NA
dataMatrix2<-impute.knn(dataMatrix2)$data
svd1<-svd(scale(dataMatrixOrdered))
svd2<-svd(scale(dataMatrix2))
par(mfrow=c(1,2)); plot(svd1$v[,1], pch=19); plot(svd2$v[,1], pch=19)
pal<-colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(0.5)
pal(seq(0,1, len=10))
pal<-colorRampPalette(c("red", "yellow"))
pal(2)
pal(10)
library(RColorBrewer)
cols<-brewer.pal(3, "BuGn")
cols
library(RColorBrewer)
cols<-brewer.pal(3, "BuGn")
cols
pal<-colorRampPalette(cols)
image(volcano, col=pal(20))
x<-rnorm(10000)
y<-rnorm(10000)
smoothScatter(x,y)
load("D://yan//learning//exploring_data_analysis//lectures//data//clusteringEx_data//data//samsungData.rda")
names(samsungData[1:12])
table(samsungData$activity)
par(mfrow=c(1:2), mar=c(5,4,1,1))
samsungData<-transform(samsungData, activity=factor(activity))
sub1<-subset(samsungData, subject=1)
plot(sub1[,1], col=sub1$activity, ylab=names(sub1)[1])
plot(sub1[,2], col=sub1$activity, ylab=names(sub1)[2])
legend("bottomright", legend=unique(sub1$activity), col=unique(sub1$activity), pch=1)
distanceMatrix<-dist(sub[,1:3])
hclustering<-hclust(distanceMatrix)
myplclust(hclustering, lab.col=unclass(sub1$activity))
myplclust <- function(hclust, lab = hclust$labels, lab.col = rep(1, length(hclust$labels)),
hang = 0.1, ...) {
## modifiction of plclust for plotting hclust objects *in colour*! Copyright
## Eva KF Chan 2009 Arguments: hclust: hclust object lab: a character vector
## of labels of the leaves of the tree lab.col: colour for the labels;
## NA=default device foreground colour hang: as in hclust & plclust Side
## effect: A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height, 2)
x <- as.numeric(hclust$merge)
y <- y[which(x < 0)]
x <- x[which(x < 0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot(hclust, labels = FALSE, hang = hang, ...)
text(x = x, y = y[hclust$order] - (max(hclust$height) * hang), labels = lab[hclust$order],
col = lab.col[hclust$order], srt = 90, adj = c(1, 0.5), xpd = NA, ...)
}
distanceMatrix<-dist(sub[,1:3])
hclustering<-hclust(distanceMatrix)
myplclust(hclustering, lab.col=unclass(sub1$activity))
myplclust <- function(hclust, lab = hclust$labels, lab.col = rep(1, length(hclust$labels)),
hang = 0.1, ...) {
## modifiction of plclust for plotting hclust objects *in colour*! Copyright
## Eva KF Chan 2009 Arguments: hclust: hclust object lab: a character vector
## of labels of the leaves of the tree lab.col: colour for the labels;
## NA=default device foreground colour hang: as in hclust & plclust Side
## effect: A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height, 2)
x <- as.numeric(hclust$merge)
y <- y[which(x < 0)]
x <- x[which(x < 0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot(hclust, labels = FALSE, hang = hang, ...)
text(x = x, y = y[hclust$order] - (max(hclust$height) * hang), labels = lab[hclust$order],
col = lab.col[hclust$order], srt = 90, adj = c(1, 0.5), xpd = NA, ...)
}
distanceMatrix<-dist(sub[,1:3])
hclustering<-hclust(distanceMatrix)
myplclust(hclustering, lab.col=unclass(sub1$activity))
distanceMatrix<-dist(sub1[,1:3])
hclustering<-hclust(distanceMatrix)
myplclust(hclustering, lab.col=unclass(sub1$activity))
par(mfrow=c(1,2))
plot(sub1[,10], pch=19, col=sub1$activity, ylab=names(sub1)[10])
plot(sub1[,11], pch=19, col=sub1$activity, ylab=names(sub1)[11])
distanceMatrix<-dist(sub1[,10:12])
hclustering<-hclust(distanceMatrix)
myplclust(hclustering, lab.col=unclass(sub1$activity))
plot(svd1$u[,1], col=sub1$activity, pch=19)
plot(svd1$u[,2], col=sub1$activity, pch=19)
x <- abs(x)
svd1<-svd(scale(sub1[,-c(562,563)]))
par(mfrow=c(1,2))
plot(svd1$u[,1], col=sub1$activity, pch=19)
plot(svd1$u[,2], col=sub1$activity, pch=19)
plot(svd1$v[,2], col=sub1$activity, pch=19)
maxContrib<-which.max(svd1$v[,2])
distanceMatrix<-dist(sub1[,c(10:12, maxContrib)])
hclustering<-hclust(distanceMatrix)
myplclust(hclustering, lab.col=unclass(sub1$activity))
names(samsungData)[maxContrib]
kClust<-kmeans(sub1[,-c(562,563)], centers=6)
table(kClust$cluster, sub1$activity)
kClust<-kmeans(sub1[,-c(562,563)], centers=6, nstart=1)
table(kClust$cluster, sub1$activity)
kClust<-kmeans(sub1[,-c(562,563)], centers=6, nstart=100)
table(kClust$cluster, sub1$activity)
plot(kClust$center[1,1:10], pch=19, ylab="Cluster Center",xlab="")
plot(kClust$center[4,1:10], pch=19, ylab="Cluster Center",xlab="")
library(kernlab)
data(spam)
# subsampling
set.seed(3435)
trainIndicator=rbinom(4601, size=1, prob=0.5)
table(trainIndicator)
trainSpam=spam[trainIndicator==1,]
testSpam=spam[trainIndicator==0,]
install.packages(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
# subsampling
set.seed(3435)
trainIndicator=rbinom(4601, size=1, prob=0.5)
table(trainIndicator)
trainSpam=spam[trainIndicator==1,]
testSpam=spam[trainIndicator==0,]
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve~trainSpam$type)
plot(log10(trainSpam$capitalAve+1)~trainSpam$type)
plot(log10(trainSpam[, 1:4]+1))
hCluster=hclust(dist(t(trainSpam[,1:57])))
plot(hCluster)
hCluster=hclust(dist(t(log10(trainSpam[,1:55]+1))))
plot(hCluster)
trainSpam$numType=as.numeric(trainSpam$type)-1
costFunction=function(x,y) sum(x!=(y>0.5))
cvError=rep(NA,55)
library(boot)
for (i in 1:55) {
lmformula=reformulate(names(trainSpam)[i], response="NumType")
glmFit=glm(lmformula, family="binomial", data=trainSpam)
cvError[i]=cv.glm(trainSpam, glmFit, costFunction,2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
trainSpam$numType=as.numeric(trainSpam$type)-1
costFunction=function(x,y) sum(x!=(y>0.5))
cvError=rep(NA,55)
library(boot)
for (i in 1:55) {
lmformula=reformulate(names(trainSpam)[i], response="numType")
glmFit=glm(lmformula, family="binomial", data=trainSpam)
cvError[i]=cv.glm(trainSpam, glmFit, costFunction,2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
predictionModel=glm(numType~charDollar, family="binomial", data=trainSpam)
predictionTest=predict(predictionModel, testSpam)
predictedSpam=rep('nonspam', dim(testSpam)[1])
table(predictedSpam, testSpam$type)
setwd("D:/yan/learning/reproducible_research/project/project1/RepData_PeerAssessment1")
new_data$dayofweek<-weekdays(as.Date(new_data$date))
avg_steps2<-aggregate(steps~interval+dayofweek, data=new, mean)
g<-ggplot(new_data, aes(x=interval, y=steps))
g+geom_line()+facet_grid(.~dayofweek)+
labs(x="Interval", y="Number of Steps")
activity_data<-read.csv("activity.csv", header=TRUE, sep=",",na.strings="NA")
summary(activity_data)
View(activity_data)
total_steps<-aggregate(steps~date, data=activity_data, sum)
hist(total_steps$steps, main="Total Number of Steps per Day", xlab="Total Number of Steps per Day")
View(total_steps)
mean(total_steps$steps,na.rm=TRUE)
median(total_steps$steps,na.rm=TRUE)
avg_steps<-aggregate(steps~interval, data=activity_data, mean)
plot(avg_steps$interval, avg_steps$steps, type="l", xlab="Interval", ylab="Average Steps", col="Blue")
View(avg_steps)
avg_steps$interval[steps=max_avgsteps]
max_avgsteps<-max(avg_steps$steps)
avg_steps$interval[steps=max_avgsteps]
max(avg_steps$steps)
View(avg_steps)
avg_steps$interval[steps==max_avgsteps]
avg_steps$interval[avg_steps$steps==max_avgsteps]
total_missing<-length(is.na(activity_data))
total_missing
total_missing<-length(activity_data[is.na(activity_data)])
total_missing
new_data<-activity_data
for(i in 1:dim(new_data)[1]) {
if(is.na(new_data$steps)) {
new_data[i,1]<-avg_steps[avg_steps$interval==new_data[i,3],2]
}
}
total_steps2<-aggregate(steps~date, data=new_data, sum)
hist(total_steps2$steps, main="Total Number of Steps per Day", xlab="Total Number of Steps per Day")
View(new_data)
new_data<-activity_data
dim(new_data)[1]
for(i in 1:dim(new_data)[1]) {
if(is.na(new_data$steps)) {
new_data[i,1]<-avg_steps[avg_steps$interval==new_data[i,3],2]
}
}
new_data<-activity_data
for(i in 1:dim(new_data)[1]) {
if(is.na(new_data$steps[i])) {
new_data[i,1]<-avg_steps[avg_steps$interval==new_data[i,3],2]
}
}
View(new_data)
total_steps2<-aggregate(steps~date, data=new_data, sum)
hist(total_steps2$steps, main="Total Number of Steps per Day", xlab="Total Number of Steps per Day")
mean(total_steps2$steps,na.rm=TRUE)
median(total_steps2$steps,na.rm=TRUE)
View(total_steps2)
View(total_steps)
View(total_steps)
View(new_data)
write.csv(new_data,"new_data.csv")
View(total_steps2)
mean(total_steps2$steps,na.rm=TRUE)
median(total_steps2$steps,na.rm=TRUE)
mean_change<-mean(total_steps2$steps,na.rm=TRUE)-mean(total_steps$steps,na.rm=TRUE)
median_change<-median(total_steps2$steps,na.rm=TRUE)-median(total_steps$steps,na.rm=TRUE)
new_data$dayofweek<-weekdays(as.Date(new_data$date))
avg_steps2<-aggregate(steps~interval+dayofweek, data=new, mean)
g<-ggplot(new_data, aes(x=interval, y=steps))
g+geom_line()+facet_grid(.~dayofweek)+
labs(x="Interval", y="Number of Steps")
View(new_data)
new_data$dayofweek<-weekdays(as.Date(new_data$date))
avg_steps2<-aggregate(steps~interval+dayofweek, data=new_data, mean)
g<-ggplot(new_data, aes(x=interval, y=steps))
g+geom_line()+facet_grid(.~dayofweek)+
labs(x="Interval", y="Number of Steps")
library(ggplot2)
new_data$dayofweek<-weekdays(as.Date(new_data$date))
avg_steps2<-aggregate(steps~interval+dayofweek, data=new_data, mean)
g<-ggplot(new_data, aes(x=interval, y=steps))
g+geom_line()+facet_grid(.~dayofweek)+
labs(x="Interval", y="Number of Steps")
library(ggplot2)
weekday<-c('Monday', 'Tuesday', 'Wednesday','Thursday', 'Friday')
new_data$dayofweek<-factor((weekdays(as.Date(new_data$date)) %in% weekday), levels=c(TRUE,FALSE),labels=c('Weekday','Weekend'))
avg_steps2<-aggregate(steps~interval+dayofweek, data=new_data, mean)
g<-ggplot(new_data, aes(x=interval, y=steps))
g+geom_line()+facet_grid(.~dayofweek)+
labs(x="Interval", y="Number of Steps")
View(new_data)
library(ggplot2)
weekday<-c('Monday', 'Tuesday', 'Wednesday','Thursday', 'Friday')
new_data$dayofweek<-factor((weekdays(as.Date(new_data$date)) %in% weekday), levels=c(TRUE,FALSE),labels=c('Weekday','Weekend'))
avg_steps2<-aggregate(steps~interval+dayofweek, data=new_data, mean)
g<-ggplot(new_data, aes(x=interval, y=steps))
g+geom_line()+facet_grid(.~dayofweek)+
labs(x="Interval", y="Number of Steps")+theme(panel.background='White')
library(ggplot2)
weekday<-c('Monday', 'Tuesday', 'Wednesday','Thursday', 'Friday')
new_data$dayofweek<-factor((weekdays(as.Date(new_data$date)) %in% weekday), levels=c(TRUE,FALSE),labels=c('Weekday','Weekend'))
avg_steps2<-aggregate(steps~interval+dayofweek, data=new_data, mean)
g<-ggplot(new_data, aes(x=interval, y=steps))
g+geom_line()+facet_grid(.~dayofweek)+
labs(x="Interval", y="Number of Steps")+theme(panel.background=element_rect(fill='white', colour='white'))
library(ggplot2)
weekday<-c('Monday', 'Tuesday', 'Wednesday','Thursday', 'Friday')
new_data$dayofweek<-factor((weekdays(as.Date(new_data$date)) %in% weekday), levels=c(TRUE,FALSE),labels=c('Weekday','Weekend'))
avg_steps2<-aggregate(steps~interval+dayofweek, data=new_data, mean)
g<-ggplot(new_data, aes(x=interval, y=steps))
g+geom_line()+facet_grid(.~dayofweek)+
labs(x="Interval", y="Number of Steps")+theme(panel.background=element_rect(fill='white', colour='black'))
View(new_data)
library(ggplot2)
weekday<-c('Monday', 'Tuesday', 'Wednesday','Thursday', 'Friday')
new_data$dayofweek<-factor((weekdays(as.Date(new_data$date)) %in% weekday), levels=c(TRUE,FALSE),labels=c('Weekday','Weekend'))
avg_steps2<-aggregate(steps~interval+dayofweek, data=new_data, mean)
g<-ggplot(new_data, aes(x=interval, y=steps))
g+geom_line()+facet_grid(dayofweek~steps)+
labs(x="Interval", y="Number of Steps")+theme(panel.background=element_rect(fill='white', colour='black'))
library(ggplot2)
weekday<-c('Monday', 'Tuesday', 'Wednesday','Thursday', 'Friday')
new_data$dayofweek<-factor((weekdays(as.Date(new_data$date)) %in% weekday), levels=c(TRUE,FALSE),labels=c('Weekday','Weekend'))
avg_steps2<-aggregate(steps~interval+dayofweek, data=new_data, mean)
g<-ggplot(new_data, aes(x=interval, y=steps))
g+geom_line()+facet_grid(dayofweek~.)+
labs(x="Interval", y="Number of Steps")+theme(panel.background=element_rect(fill='white', colour='black'))
library(ggplot2)
weekday<-c('Monday', 'Tuesday', 'Wednesday','Thursday', 'Friday')
new_data$dayofweek<-factor((weekdays(as.Date(new_data$date)) %in% weekday), levels=c(TRUE,FALSE),labels=c('Weekday','Weekend'))
avg_steps2<-aggregate(steps~interval+dayofweek, data=new_data, mean)
g<-ggplot(new_data, aes(x=interval, y=steps))
g+geom_line()+facet_grid(.~dayofweek)+
labs(x="Interval", y="Number of Steps")+theme(panel.background=element_rect(fill='white', colour='black'))
library(ggplot2)
weekday<-c('Monday', 'Tuesday', 'Wednesday','Thursday', 'Friday')
new_data$dayofweek<-factor((weekdays(as.Date(new_data$date)) %in% weekday), levels=c(TRUE,FALSE),labels=c('Weekday','Weekend'))
avg_steps2<-aggregate(steps~interval+dayofweek, data=new_data, mean)
g<-ggplot(new_data, aes(x=interval, y=steps))
g+geom_line()+facet_grid(.~dayofweek)+
labs(x="Interval", y="Number of Steps")+theme(panel.background=element_rect(fill='white', colour='black'),strip.background=element_rect(fill='orange', colour='black'))
View(avg_steps2)
View(avg_steps2)
library(ggplot2)
weekday<-c('Monday', 'Tuesday', 'Wednesday','Thursday', 'Friday')
new_data$dayofweek<-factor((weekdays(as.Date(new_data$date)) %in% weekday), levels=c(TRUE,FALSE),labels=c('Weekday','Weekend'))
avg_steps2<-aggregate(steps~interval+dayofweek, data=new_data, mean)
g<-ggplot(avg_steps2, aes(x=interval, y=steps))
g+geom_line()+facet_grid(.~dayofweek)+
labs(x="Interval", y="Number of Steps")+theme(panel.background=element_rect(fill='white', colour='black'),strip.background=element_rect(fill='orange', colour='black'))
View(avg_steps2)
library(ggplot2)
weekday<-c('Monday', 'Tuesday', 'Wednesday','Thursday', 'Friday')
new_data$dayofweek<-factor((weekdays(as.Date(new_data$date)) %in% weekday), levels=c(TRUE,FALSE),labels=c('Weekday','Weekend'))
avg_steps2<-aggregate(steps~interval+dayofweek, data=new_data, mean)
g<-ggplot(avg_steps2, aes(x=interval, y=steps))
g+geom_line()+facet_grid(.~dayofweek)+
labs(x="Interval", y="Number of Steps")+theme(panel.background=element_blank(),strip.background=element_rect(fill='orange', colour='black'))
library(ggplot2)
weekday<-c('Monday', 'Tuesday', 'Wednesday','Thursday', 'Friday')
new_data$dayofweek<-factor((weekdays(as.Date(new_data$date)) %in% weekday), levels=c(TRUE,FALSE),labels=c('Weekday','Weekend'))
avg_steps2<-aggregate(steps~interval+dayofweek, data=new_data, mean)
g<-ggplot(avg_steps2, aes(x=interval, y=steps))
g+geom_line()+facet_grid(.~dayofweek)+
labs(x="Interval", y="Number of Steps")+theme(panel.background=element_rect(fill='white', colour='black'),strip.background=element_rect(fill='orange', colour='black'))
library(ggplot2)
weekday<-c('Monday', 'Tuesday', 'Wednesday','Thursday', 'Friday')
new_data$dayofweek<-factor((weekdays(as.Date(new_data$date)) %in% weekday), levels=c(TRUE,FALSE),labels=c('Weekday','Weekend'))
avg_steps2<-aggregate(steps~interval+dayofweek, data=new_data, mean)
g<-ggplot(avg_steps2, aes(x=interval, y=steps))
g+geom_line()+facet_grid(.~dayofweek)+
labs(x="Interval", y="Number of Steps")+theme(panel.background=element_rect(fill='white', colour='black'),strip.background=element_rect(fill='orange', colour='black',panel.grid.major = element_blank(), panel.grid.minor = element_blank()))
library(ggplot2)
weekday<-c('Monday', 'Tuesday', 'Wednesday','Thursday', 'Friday')
new_data$dayofweek<-factor((weekdays(as.Date(new_data$date)) %in% weekday), levels=c(TRUE,FALSE),labels=c('Weekday','Weekend'))
avg_steps2<-aggregate(steps~interval+dayofweek, data=new_data, mean)
g<-ggplot(avg_steps2, aes(x=interval, y=steps))
g+geom_line()+facet_grid(.~dayofweek)+
labs(x="Interval", y="Number of Steps")+theme(panel.background=element_rect(fill='white', colour='black'),strip.background=element_rect(fill='orange', colour='black'),panel.grid.major = element_blank(), panel.grid.minor = element_blank())
library(ggplot2)
weekday<-c('Monday', 'Tuesday', 'Wednesday','Thursday', 'Friday')
new_data$dayofweek<-factor((weekdays(as.Date(new_data$date)) %in% weekday), levels=c(TRUE,FALSE),labels=c('Weekday','Weekend'))
avg_steps2<-aggregate(steps~interval+dayofweek, data=new_data, mean)
g<-ggplot(avg_steps2, aes(x=interval, y=steps))
g+geom_line()+facet_grid(.~dayofweek, scales='free')+
labs(x="Interval", y="Number of Steps")+theme(panel.background=element_rect(fill='white', colour='black'),strip.background=element_rect(fill='orange', colour='black'),panel.grid.major = element_blank(), panel.grid.minor = element_blank())
library(ggplot2)
weekday<-c('Monday', 'Tuesday', 'Wednesday','Thursday', 'Friday')
new_data$dayofweek<-factor((weekdays(as.Date(new_data$date)) %in% weekday), levels=c(TRUE,FALSE),labels=c('Weekday','Weekend'))
avg_steps2<-aggregate(steps~interval+dayofweek, data=new_data, mean)
g<-ggplot(avg_steps2, aes(x=interval, y=steps))
g+geom_line()+facet_grid(.~dayofweek)+
labs(x="Interval", y="Number of Steps")+theme(panel.background=element_rect(fill='white', colour='black'),strip.background=element_rect(fill='orange', colour='black'),panel.grid.major = element_blank(), panel.grid.minor = element_blank())
library(ggplot2)
weekday<-c('Monday', 'Tuesday', 'Wednesday','Thursday', 'Friday')
new_data$dayofweek<-factor((weekdays(as.Date(new_data$date)) %in% weekday), levels=c(TRUE,FALSE),labels=c('Weekday','Weekend'))
avg_steps2<-aggregate(steps~interval+dayofweek, data=new_data, mean)
g<-ggplot(avg_steps2, aes(x=interval, y=steps))
g+geom_line()+facet_grid(.~dayofweek,ncol=1)+
labs(x="Interval", y="Number of Steps")+theme(panel.background=element_rect(fill='white', colour='black'),strip.background=element_rect(fill='orange', colour='black'),panel.grid.major = element_blank(), panel.grid.minor = element_blank())
library(ggplot2)
weekday<-c('Monday', 'Tuesday', 'Wednesday','Thursday', 'Friday')
new_data$dayofweek<-factor((weekdays(as.Date(new_data$date)) %in% weekday), levels=c(TRUE,FALSE),labels=c('Weekday','Weekend'))
avg_steps2<-aggregate(steps~interval+dayofweek, data=new_data, mean)
g<-ggplot(avg_steps2, aes(x=interval, y=steps))
g+geom_line()+facet_wrap(.~dayofweek,ncol=1)+
labs(x="Interval", y="Number of Steps")+theme(panel.background=element_rect(fill='white', colour='black'),strip.background=element_rect(fill='orange', colour='black'),panel.grid.major = element_blank(), panel.grid.minor = element_blank())
library(ggplot2)
weekday<-c('Monday', 'Tuesday', 'Wednesday','Thursday', 'Friday')
new_data$dayofweek<-factor((weekdays(as.Date(new_data$date)) %in% weekday), levels=c(TRUE,FALSE),labels=c('Weekday','Weekend'))
avg_steps2<-aggregate(steps~interval+dayofweek, data=new_data, mean)
g<-ggplot(avg_steps2, aes(x=interval, y=steps, group=dayofweek))
g+geom_line()+facet_wrap(.~dayofweek,ncol=1)+
labs(x="Interval", y="Number of Steps")+theme(panel.background=element_rect(fill='white', colour='black'),strip.background=element_rect(fill='orange', colour='black'),panel.grid.major = element_blank(), panel.grid.minor = element_blank())
library(ggplot2)
weekday<-c('Monday', 'Tuesday', 'Wednesday','Thursday', 'Friday')
new_data$dayofweek<-factor((weekdays(as.Date(new_data$date)) %in% weekday), levels=c(TRUE,FALSE),labels=c('Weekday','Weekend'))
avg_steps2<-aggregate(steps~interval+dayofweek, data=new_data, mean)
g<-ggplot(avg_steps2, aes(x=interval, y=steps, group=dayofweek))
g+geom_line()+facet_wrap(~dayofweek,ncol=1)+
labs(x="Interval", y="Number of Steps")+theme(panel.background=element_rect(fill='white', colour='black'),strip.background=element_rect(fill='orange', colour='black'),panel.grid.major = element_blank(), panel.grid.minor = element_blank())
